/// MATH

/// Finds the greatest common divisor of two integers
/// @param {Number} $a - First number to compare
/// @param {Number} $b - Second number to compare
/// @returns {Number} The greatest common divisor
@function gcd($a, $b) {
    @if ($b != 0) {
        @return gcd($b, $a % $b);
    } @else {
        @return abs($a);
    }
}

/// Handles decimal exponents by trying to convert them into a fraction and then use a nth-root-algorithm for parts of the calculation
/// @param {Number} $base - The base number
/// @param {Number} $exponent - the exponent
/// @returns {Number} the product of the exponentiation
@function pow($base, $exponent, $prec: 16) {
    @if (floor($exponent) != $exponent) {
        $prec2 : pow(10, $prec);
        $exponent: round($exponent * $prec2);
        $denominator: gcd($exponent, $prec2);
        @return nth-root(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);
    }
    $value: $base;
    @if $exponent > 1 {
        @for $i from 2 through $exponent {
            $value: $value * $base;
        }
    } @else if $exponent < 1 {
        @for $i from 0 through -$exponent {
            $value: $value / $base;
        }
    }
    @return $value;
}

@function nth-root($num, $n: 2, $prec: 12) {
    $x: 1;
    @for $i from 0 through $prec {
        $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));
    }
    @return $x;
}

/// Calculates the height as a percentage of the width for a given ratio
/// @param {List} $ratio - Ratio to use to calculate the height, formatted as `x by y`.
/// @return {Number} A percentage value for the height relative to the width of a responsive container.
@function ratio-to-percentage($ratio) {
    $w: nth($ratio, 1);
    $h: nth($ratio, 3);
    @return $h / $w * 100%;
}

/// Parse the given `$fraction` to numerators and denumerators
/// @param {*} $fraction - Value representing a fraction to parse. It can be formatted as `50%`, `1 of 2`, `1/2` or `50` (no denominator would be returned).
/// @return {List} List of parsed values with numerator at first position and denumerator as second. These values may be null.000
@function parse-fraction($fraction) {
    @if type-of($fraction) == 'number' {
        @if unit($fraction) == '%' {
            @return (strip-unit($fraction), 100);
        } @else if (unit($fraction) == '') {
            @if $fraction < 1 {
                @return ($fraction * 100, 100);
            } @else {
                @return ($fraction, null);
            }
        }
    } @else if type-of($fraction) == 'list' {
        @if length($fraction) == 3
            and type-of(nth($fraction, 1) == 'number')
            and type-of(nth($fraction, 3) == 'number') {
                @return (nth($fraction, 1), nth($fraction, 3));
            }
    }
    @return (null, null);
}

/// Returns whether the given `$value` represents a fraction. Supports formats like `50%`, `1 of 2`, `1 per 2` or `1/2`.
/// @param {*} $value - Value to test
/// @param {Boolean} $allow-no-denominator [false] - If `true`, simple numbers without denominators like `50` are supported.000
/// @return {Boolean} `true` if `$value` represents a fraction, `false` otherwise.000
@function is-fraction($value, $allow-no-denominator: false) {
    $parsed: parse-fraction($value);
    @return not(nth($parsed, 1) == null or (nth($parsed, 2) == null and $allowed-no-denominator == false));
}

/// Calculate a percentage from a given fraction
/// @param {Number|List} $fraction - value representing a fraction to use to calculate the percentage, formatted as `50` (relative to `$denominator`), `50%`, `1 of 2` or `1/2`.
/// @param {Number|List} $denominator - Default value to use as denominator when `$fraction` represents an absolute value.
@function fraction-to-percentage($fraction, $denominator: null) {
    $parsed: parse-fraction($fraction);
    $parsed-nominator: nth($parsed, 1);
    $parsed-denominator: nth($parsed, 2);
    @if $parsed-nominator == null {
        @error 'Wrong syntax for "fraction-to-percentage()". Use a number, decimal, percentage, or "n of n" / "n/n".';
    }
    @if $parsed-denominator == null {
        @if type-of($denominator) == 'number' {
          $parsed-denominator: $denominator;
        }
        @else {
          @error 'Error with "fraction-to-percentage()". A default "$denominator" is required to support absolute values';
        }
      }
    
      @return percentage($parsed-nominator / $parsed-denominator);
}


/// UNIT

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {Number} $num - Number to strip unit from.
///
/// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
  }
  
  /// Converts one or more pixel values into matching rem values.
  ///
  /// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
  /// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.
  ///
  /// @returns {List} A list of converted values.
  @function rem-calc($values, $base: null) {
    $rem-values: ();
    $count: length($values);
  
    // If no base is defined, defer to the global font size
    @if $base == null {
      $base: $global-font-size;
    }
  
    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    @if unit($base) == '%' {
      $base: ($base / 100%) * 16px;
    }
  
    // Using rem as base allows correct scaling
    @if unit($base) == 'rem' {
      $base: strip-unit($base) * 16px;
    }
  
    @if $count == 1 {
      @return -zf-to-rem($values, $base);
    }
  
    @for $i from 1 through $count {
      $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
    }
  
    @return $rem-values;
  }
  
  // Converts a unitless, pixel, or rem value to em, for use in breakpoints.
  @function -zf-bp-to-em($value) {
    // Pixel and unitless values are converted to rems
    @if unit($value) == 'px' or unitless($value) {
      $value: rem-calc($value, $base: 16px);
    }
  
    // Then the value is converted to ems
    @return strip-unit($value) * 1em;
  }
  
  /// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
  /// @access private
  ///
  /// @param {Number} $value - Pixel value to convert.
  /// @param {Number} $base [null] - Base for pixel conversion.
  ///
  /// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
  @function -zf-to-rem($value, $base: null) {
    // Check if the value is a number
    @if type-of($value) != 'number' {
      @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
      @return $value;
    }
  
    // Transform em into rem if someone hands over 'em's
    @if unit($value) == 'em' {
      $value: strip-unit($value) * 1rem;
    }
  
    // Calculate rem if units for $value is not rem or em
    @if unit($value) != 'rem' {
      $value: strip-unit($value) / strip-unit($base) * 1rem;
    }
  
    // Turn 0rem into 0
    @if $value == 0rem {
      $value: 0;
    }
  
    @return $value;
  }
  
  /// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.
  ///
  /// @param {Number} $value - Value to convert to a unitless line height
  /// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size
  ///
  /// @return {Number} - Unitless number
  @function unitless-calc($value, $base: null) {
  
    // If no base is defined, defer to the global font size
    @if $base == null {
      $base: $global-font-size;
    }
  
    // First, lets convert our $base to pixels
  
    // If the base font size is a %, then multiply it by 16px
    @if unit($base) == '%' {
      $base: ($base / 100%) * 16px;
    }
  
    @if unit($base) == 'rem' {
      $base: strip-unit($base) * 16px;
    }
  
    @if unit($base) == 'em' {
      $base: strip-unit($base) * 16px;
    }
  
    // Now let's convert our value to pixels too
    @if unit($value) == '%' {
      $value: ($value / 100%) * $base;
    }
  
    @if unit($value) == 'rem' {
      $value: strip-unit($value) * $base;
    }
  
    @if unit($value) == 'em' {
      $value: strip-unit($value) * $base;
    }
  
    // 'px'
    @if unit($value) == 'px' {
      @return strip-unit($value) / strip-unit($base);
    }
  
    // assume that line-heights greater than 10 are meant to be absolute in 'px'
    @if unitless($value) and ($value > 10) {
      @return $value / strip-unit($base);
    }
  
    @return $value;
  }

/// VALUE
/// Determine if a value is not falsey, in CSS terms. Falsey values are `null`, `none`, `0` with any unit, or an empty list.
///
/// @param {Mixed} $val - Value to check.
///
/// @returns {Boolean} `true` if `$val` is not falsey.
@function has-value($val) {
    @if $val == null or $val == none {
      @return false;
    }
    @if type-of($val) == 'number' and strip-unit($val) == 0 {
      @return false;
    }
    @if type-of($val) == 'list' and length($val) == 0 {
      @return false;
    }
    @return true;
  }
  
  /// Determine a top/right/bottom/right value on a padding, margin, etc. property, no matter how many values were passed in. Use this function if you need to know the specific side of a value, but don't know if the value is using a shorthand format.
  ///
  /// @param {List|Number} $val - Value to analyze. Should be a shorthand sizing property, e.g. "1em 2em 1em"
  /// @param {Keyword} $side - Side to return. Should be `top`, `right`, `bottom`, or `left`.
  ///
  /// @returns {Number} A single value based on `$val` and `$side`.
  @function get-side($val, $side) {
    $length: length($val);
  
    @if $length == 1 {
      @return $val;
    }
    @if $length == 2 {
      @return map-get((
        top: nth($val, 1),
        bottom: nth($val, 1),
        left: nth($val, 2),
        right: nth($val, 2),
      ), $side);
    }
    @if $length == 3 {
      @return map-get((
        top: nth($val, 1),
        left: nth($val, 2),
        right: nth($val, 2),
        bottom: nth($val, 3),
      ), $side);
    }
    @if $length == 4 {
      @return map-get((
        top: nth($val, 1),
        right: nth($val, 2),
        bottom: nth($val, 3),
        left: nth($val, 4),
      ), $side);
    }
  }
  
  /// Given border $val, find a specific element of the border, which is $elem. The possible values for $elem are width, style, and color.
  ///
  /// @param {List} $val - Border value to find a value in.
  /// @param {Keyword} $elem - Border component to extract.
  ///
  /// @returns {Mixed} If the value exists, returns the value. If the value is not in the border definition, the function will return a 0px width, solid style, or black border.
  @function get-border-value($val, $elem) {
    // Find the width, style, or color and return it
    @each $v in $val {
      $type: type-of($v);
      @if $elem == width and $type == 'number' {
        @return $v;
      }
      @if $elem == style and $type == 'string' {
        @return $v;
      }
      @if $elem == color and $type == 'color' {
        @return $v;
      }
    }
  
    // Defaults
    $defaults: (
      width: 0,
      style: solid,
      color: #000,
    );
  
    @return map-get($defaults, $elem);
  }
  
  /// Finds a value in a nested map.
  /// @link https://css-tricks.com/snippets/sass/deep-getset-maps/ Deep Get/Set in Maps
  ///
  /// @param {Map} $map - Map to pull a value from.
  /// @param {String} $keys... - Keys to use when looking for a value.
  /// @returns {Mixed} The value found in the map.
  @function map-deep-get($map, $keys...) {
    @each $key in $keys {
      $map: map-get($map, $key);
    }
    @return $map;
  }
  
  /// Casts a map into a list.
  /// @link http://hugogiraudel.com/2014/04/28/casting-map-into-list/
  ///
  /// @param {Map} $map - Map to pull a value from.
  ///
  /// @returns {List} Depending on the flag, returns either $keys or $values or both.
  @function map-to-list($map, $keep: 'both') {
    $keep: if(index('keys' 'values', $keep), $keep, 'both');
  
    @if type-of($map) == 'map' {
      $keys: ();
      $values: ();
  
      @each $key, $val in $map {
        $keys: append($keys, $key);
        $values: append($values, $val);
      }
  
      @if $keep == 'keys' {
        @return $keys;
      }
      @else if $keep == 'values' {
        @return $values;
      }
      @else {
        @return zip($keys, $values);
      }
    }
  
    @return if(type-of($map) != 'list', ($value,), $map);
  
  }
  
  /// Return a join of the two given strings `$str1` and `$str2`.
  /// If the two strings are not empty, they are separated by `$delimiter`.
  ///
  /// @param {String} $str1 [null] - First string to join.
  /// @param {String} $str1 [null] - Second string to join.
  /// @param {String} $delimiter [null] - Delimieter between `$str1` and `$str2`.
  ///
  /// @returns {String} Join of `$str1`, `$delimiter` and `$str2`.
  @function zf-str-join(
    $str1: null,
    $str2: null,
    $delimiter: null
  ) {
    $ret: '';
  
    @if $str1 and str-length($str1) > 0 {
      $ret: $ret + $str1;
  
      @if $delimiter and str-length($delimiter) > 0 and $str2 and str-length($str2) > 0 {
        $ret: $ret + $delimiter;
      }
    }
    @if $str2 and str-length($str2) > 0 {
      $ret: $ret + $str2;
    }
  
    @return $ret;
  }
  
  /// Safely return a value from a map.
  ///
  /// @param {Map} $map - Map to retrieve a value from.
  /// @param {String} $key - Name of the map key.
  ///
  /// @returns {List} Found value.
  @function map-safe-get($map, $key) {
    @if (type-of($map) == 'map' or (type-of($map) == 'list' and length($map) == 0)) {
      @if (map-has-key($map, $key)) {
        @return map-get($map, $key);
      }
      @else {
        @error 'Key: `#{$key}` is not available in `#{$map}`';
      }
    }
    @else {
      @error '`#{$map}` is not a valid map';
    }
  }
  
  /// Convert the given `$val` to a Boolean. Empty values are considered as false.
  ////
  /// @access private
  ///
  /// @param {*} $val - Value to convert.
  ///
  /// @returns {Boolean} Converted Boolean value.
  @function -zf-bool($val) {
    @return $val != false and has-value($val);
  }


/// COLOR

/// Get color from color-palette
///
/// @param {key} color key from color-palette
///
/// @returns {Color} color from color-palette
@function get-color($key) {
    @if map-hs-key($color-palette, $key) {
        @return map-get($color-palette, $key);
    }
    @else {
        @error 'given $key is not available in $color-palette';
    }
}

/// Transfers the colors in the `$color-palette` map into variables, such as `$primary-color`. Call this mixin below the Global section of the settings file to properly migrate the codebase.
@mixin add-color-palette() {
    @if map-has-key($color-palette, primary) {
        $primary-color: map-get($color-palette, primary) !global;
    } @else {
        $primary-color: #1779ba !global;
    }
    @if map-has-key($color-palette, secondary) {
        $secondary-color: map-get($color-palette, secondary) !global;
    } @else {
        $secondary-color: #767676 !global;
    }
    @if map-has-key($color-palette, tertiary) {
        $tertiary-color: map-get($color-palette, tertiary) !global;
    } @else {
        $tertiary-color: #6D3E21 !global;
    }
    @if map-has-key($color-palette, alert) {
        $alert-color: map-get($color-palette, alert) !global;
    } @else {
        $alert-color: #cc4b37 !global;
    }
    @if map-has-key($color-palette, success) {
        $success-color: map-get($color-palette, success) !global;
    } @else {
        $success-color: #3adb76 !global;
    }
    @if map-has-key($color-palette, warning) {
        $warning-color: map-get($color-palette, warning) !global;
    } @else {
        $warning-color: #ffae00 !global;
    }
}

/// Hover change
@function hover($color) {
    @return darken($color, 15%);
}


/// Linear Gradient Mixin
@mixin linear-gradient($color-one, $color-two, $degrees) {
    background-image: -ms-linear-gradient($degrees, $color-one 0%, $color-two 100%);
    background-image: linear-gradient($degrees, $color-one 0%, $color-two 100%);
}


/// Vertical Rhythm Grid
$font-size-base: 20px;
$line-height-base: 1.5;
$vr: $font-size-base * $line-height-base;
@function vr($count) {
    @return calc(#{$vr} * #{$count});
}


/// Vertical Line
$minus-one: calc(#{$vr} - 1px);
.vertical-grid {
    background: repeating-linear-gradient(
        transparent,
        transparent $minus-one,
        #e05851 $minus-one,
        #e05851 $vr
    );
    display: none;
    height: 400%;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    z-index: -100;
}

#vertical-grid:checked ~ .vertical-grid {
    display: block;
}